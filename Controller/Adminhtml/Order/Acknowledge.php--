<?php

/**
 * CedCommerce
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the End User License Agreement(EULA)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://cedcommerce.com/license-agreement.txt
 *
 * @category  Ced
 * @package   Ced_GoodMarket
 * @author    CedCommerce Core Team <connect@cedcommerce.com>
 * @copyright Copyright CEDCOMMERCE(http://cedcommerce.com/)
 * @license   http://cedcommerce.com/license-agreement.txt
 */

namespace Ced\GoodMarket\Controller\Adminhtml\Order;

/**
 * TODO: dev
 * Class Delete
 * @package Ced\GoodMarket\Controller\Adminhtml\Order
 */
class Acknowledge extends \Magento\Backend\App\Action
{
    /**
     * @var \Magento\Ui\Component\MassAction\Filter
     */
    public $filter;

    /**
     * @var \Ced\GoodMarket\Model\Order
     */
    public $orders;

    /**
     * Delete constructor.
     * @param \Magento\Backend\App\Action\Context $context
     * @param \Magento\Ui\Component\MassAction\Filter $filter
     * @param \Ced\GoodMarket\Model\Order $collection
     */
    public function __construct(
        \Magento\Backend\App\Action\Context $context,
        \Magento\Ui\Component\MassAction\Filter $filter,
        \Ced\GoodMarket\Model\Order $collection,
        \Ced\GoodMarket\Helper\Request $request,
        \Ced\GoodMarket\Model\AccountsFactory $accounts,
        \Ced\GoodMarket\Model\OrderFactory $orderfactory,
        \Ced\GoodMarket\Helper\Config $config
    ) {
        parent::__construct($context);
        $this->filter = $filter;
        $this->orders = $collection;
        $this->request = $request;
        $this->accounts = $accounts;
        $this->config =$config;
        $this->orderfactory = $orderfactory;
    }

    /**
     * @return \Magento\Framework\App\ResponseInterface|\Magento\Framework\Controller\ResultInterface
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function execute()
    {
        $isFilter = $this->getRequest()->getParam('filters');
        if (isset($isFilter)) {
            $collection = $this->filter->getCollection($this->orders->getCollection());
        } else {
            $id = $this->getRequest()->getParam('id');
            if (isset($id) and !empty($id)) {
                $collection = $this->orders->getCollection()->addFieldToFilter('id', ['eq' => $id]);
            }
        }
        $orders=$collection->getData();
        $count=0;
        foreach($orders as $order)
        {
            if($order['status']!='failed'&&$order['status']!='Cancelled')
            {
                $accounts = $this->accounts->create()->load($order['account_code'],'account_code');
                $response=$this->request->orderAcknowledge($accounts->getData(),$order['goodmarket_order_id'],$count);
                if($response>$count)
                {
                    $count=$response;
                    $mpOrder=$this->orderfactory->create()->load($order['goodmarket_order_id'],'goodmarket_order_id');
                    $mpOrder->setStatus('Acknowledged');
                    $mpOrder->save();

                }
            }

        }

        $this->messageManager->addSuccessMessage($response.' Order Get Acknowledged On GoodMarket');

        return $this->_redirect('goodmarket/order/index');
    }
}
